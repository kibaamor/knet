language: cpp

matrix:
  # GCC 5
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=5

  # GCC6
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=6

  # GCC7
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=7

  # GCC8
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=8

  # GCC9
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=9

  # GCC10
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=10

  # GCC11
  - os: linux
    dist: bionic
    env:
      - GCC_VERSION=11

  # Clang 5.0
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=5.0

  # Clang 6.0
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=6.0

  # Clang 7
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=7

  # Clang 8
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=8

  # Clang 9
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=9

  # Clang 10
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=10

  # Clang 11
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=11

  # Clang 12
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=12

  # Clang 13
  - os: linux
    dist: bionic
    env:
      - CLANG_VERSION=13

  # osx image list https://docs.travis-ci.com/user/reference/osx/#macos-version
  # Xcode 9.4 Clang
  - os: osx
    osx_image: xcode9.4

  # Xcode 10.3 Clang
  - os: osx
    osx_image: xcode10.3

  # Xcode 11.6 Clang
  - os: osx
    osx_image: xcode11.6

  # Xcode 12.5 Clang
  - os: osx
    osx_image: xcode12.5

  # FreeBSD
  - os: freebsd

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      SUDO=sudo -E
      APT=$SUDO apt-get -yq --no-install-suggests --no-install-recommends
      CMAKE_VERSION="3.15.5-0kitware1"

      curl -sSL "https://apt.kitware.com/keys/kitware-archive-latest.asc" | $SUDO apt-key add -
      echo "deb https://apt.kitware.com/ubuntu/ bionic main" | sudo tee -a ${TRAVIS_ROOT}/etc/apt/sources.list >/dev/null
      $APT update
      $APT install cmake=$CMAKE_VERSION cmake-data=$CMAKE_VERSION

      if [[ "$GCC_VERSION" != "" ]]; then
        $SUDO add-apt-repository -y ppa:ubuntu-toolchain-r/test
        $APT update
        $APT install g++-$GCC_VERSION
        export MATRIX_EVAL="CC=gcc-$GCC_VERSION CXX=g++-$GCC_VERSION PATH=/usr/local/bin:/usr/bin:$PATH"
      fi

      if [[ "$CLANG_VERSION" != "" ]]; then
        curl -sSL "https://apt.llvm.org/llvm-snapshot.gpg.key" | $SUDO apt-key add -
        echo "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-$CLANG_VERSION main" | sudo tee -a ${TRAVIS_ROOT}/etc/apt/sources.list >/dev/null
        $APT update
        $APT install clang-$CLANG_VERSION
        export MATRIX_EVAL="CC=clang-$CLANG_VERSION CXX=clang++-$CLANG_VERSION PATH=/usr/local/bin:/usr/bin:$PATH"
      fi
    fi

before_script:
  - eval "${MATRIX_EVAL}"
  - printenv
  - ${CC} --version
  - ${CXX} --version
  - cmake --version

script:
  # Generate project
  - cmake . -B build

  # Debug
  - cmake --build build --clean-first --config Debug
  - (cd build && ctest --output-on-failure)

  # Release
  - cmake --build build --clean-first --config Release
  - (cd build && ctest --output-on-failure)

  # MinSizeRel
  - cmake --build build --clean-first --config MinSizeRel
  - (cd build && ctest --output-on-failure)

  # RelWithDebInfo
  - cmake --build build --clean-first --config RelWithDebInfo
  - (cd build && ctest --output-on-failure)
